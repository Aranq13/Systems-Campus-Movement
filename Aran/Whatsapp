breed [ buildings building ]

breed [ walkers walker ]
walkers-own [ goal ]

patches-own [ popularity ]

globals [ mouse-clicked? ]

; if youse want to change colours just change the numbers where you see them 
;(or make the colour a variable probably best i was a bit lazy)
; 126 is purple 
;64.3 is green
; grey is grey duh ...

to setup
  clear-all
  set-default-shape buildings "house"
  import-pcolors "paths_test_map1.png"
  ;ask patches [ set pcolor green ]
  create-walkers walker-count [
    ;setxy random-xcor random-ycor
    setxy 0 0
    set goal one-of patches with [pcolor != 126 and any? neighbors4 with [ pcolor = 126] ]
    set color yellow
    set size 2
  ]
  reset-ticks
end

;; Click to place buildings
;; Have stuff unbecome path once it decays below a certain popularity threshold
to go
  check-building-placement
  move-walkers
  decay-popularity
  recolor-patches
  ; this removes paths right beside buildings stops people walking into walls 
  ; if you reduce the roadway width mabye comment this out
   ask patches [
    if pcolor = grey [
      if any? neighbors4 with [ pcolor = 126] [
         set pcolor 64.3]]]

  tick
end

to check-building-placement
  ifelse mouse-down? [
    if not mouse-clicked? [
      set mouse-clicked? true
      ask patch mouse-xcor mouse-ycor [ toggle-building ]
    ]
  ] [
    set mouse-clicked? false
  ]
end

to toggle-building
  let nearby-buildings buildings in-radius 4
  ifelse any? nearby-buildings [
    ; if there is a building near where the mouse was clicked
    ; (and there should always only be one), we remove it and
    ask nearby-buildings [ die ]
  ] [
    ; if there was no buildings near where
    ; the mouse was clicked, we create one
    sprout-buildings 1 [
      set color red
      set size 4
    ]
  ]
end

to decay-popularity
  ask patches with [ not any? walkers-here ] [
    if pcolor != 126[
    set popularity popularity * (100 - popularity-decay-rate) / 100
    ; when popularity is below 1, the patch becomes (or stays) grass
    if popularity < 1 [ set pcolor 64.3 ]
  ]]
end

to become-more-popular
  set popularity popularity + popularity-per-step
  ; if the increase in popularity takes us above the threshold, become a route
  if popularity >= minimum-route-popularity [ set pcolor gray ]
end

to move-walkers
  ask walkers [
    ifelse patch-here = goal [
      ifelse count buildings >= 2 [
        set goal [ patch-here ] of one-of buildings
      ] [
        set goal one-of patches
      ]
    ] [
      walk-towards-goal
    ]
  ]
end

to walk-towards-goal
  if pcolor != gray and pcolor != 126 [
    ; boost the popularity of the patch we're on
    ask patch-here [ become-more-popular ]
  ]
  face best-way-to goal
  ; this is the vibrational thingy 
   ifelse [pcolor] of patch-ahead 3 = 126
    [ rt random-normal 90 180
      if[pcolor] of patch-ahead 3 != 126
      [fd 2 ]
      ]
    [ fd 1 ]
end

to-report best-way-to [ destination ]

  ; of all the visible route patches, select the ones
  ; that would take me closer to my destination
  let visible-patches patches in-radius 3 ; walker-vision-dist
  let visible-routes visible-patches with [ pcolor = gray ]
  let routes-that-take-me-closer visible-routes with [
    distance destination < [ distance destination - 1 ] of myself ]

  ifelse any? routes-that-take-me-closer [
    ; from those route patches, choose the one that is the closest to me
    report min-one-of routes-that-take-me-closer [ distance self ]
  ] [
    ; if there are no nearby routes to my destination
    report destination
  ]

end

to recolor-patches

  ifelse show-popularity? [
    let max-value (minimum-route-popularity * 3)
    ask patches with [ pcolor != gray  and pcolor != 126] [
      set pcolor scale-color 64.3 popularity (- max-value) max-value
    ]
  ] [
    ask patches with [ pcolor != gray and pcolor != 126 ] [
      set pcolor 64.3
    ]
  ]
end

;any? neighbors4 with

; Copyright 2015 Uri Wilensky.
; See Info tab for full copyright and license.
